############################################################################
#
#  Program:         SuperLU_DIST
#
#  Module:          make.inc
#
#  Purpose:         Top-level Definitions
#
#  Creation date:   February 4, 1999   version alpha
#
#  Modified:	    September 1, 1999  version 1.0
#                   March 15, 2003     version 2.0
#		    November 1, 2007   version 2.1
#		    September 1, 2011   version 3.0
#		    October 1, 2014   version 4.0
#
############################################################################
#
#  The machine (platform) identifier to append to the library names
# Carver: Intel compiler
PLAT		= _sp

#
#  The name of the libraries to be created/linked to
#
SuperLUroot 	= ${HOME}/Release_Codes/SuperLU_DIST_4.2
DSUPERLULIB   	= $(SuperLUroot)/lib/libsuperlu_dist_4.2.a
INCLUDEDIR   	= $(SuperLUroot)/SRC

#
BLASDEF	     	= -DUSE_VENDOR_BLAS
BLASLIB	        = ${MKL}
#
LAPACKLIB	= 
# SLU_HAVE_LAPACK	= TRUE

################# parmetis 4.x.x, 32-bit integer ###########################
#HAVE_PARMETIS = TRUE
PARMETIS_DIR	:= ${HOME}/Carver/lib/parmetis-4.0.3
## parmetis 4.x.x, 64-bit integer
# PARMETIS_DIR	:= ${HOME}/Carver/lib/parmetis-4.0.3_64

METISLIB := -L${PARMETIS_DIR}/build/Linux-x86_64/libmetis -lmetis
PARMETISLIB := -L${PARMETIS_DIR}/build/Linux-x86_64/libparmetis -lparmetis
I_PARMETIS := -I${PARMETIS_DIR}/include -I${PARMETIS_DIR}/metis/include
############################################################################

# Define the required Fortran libraries, if you use C compiler to link
FLIBS	 	= 

# Define all the libraries
LIBS   	= $(DSUPERLULIB) $(PARMETISLIB) $(METISLIB) $(BLASLIB) \
	  $(LAPACKLIB) $(FLIBS)

# Include directories for header files
INCS	= ${I_PARMETIS}

#
#  The archiver and the flag(s) to use when building archive (library)
#  If your system has no ranlib, set RANLIB = echo.
#
ARCH         	= ar
ARCHFLAGS    	= cr
RANLIB       	= ranlib


############################################################################
# C compiler setup
CC           	= mpicc
# CFLAGS should be set to be the C flags that include optimization
CFLAGS          = ${CUDA_FLAGS} ${INCS} -std=c99 -O3 -Wall -w2 -openmp -mkl \
		-DDEBUGlevel=0 -DPRNTlevel=1 -DPROFlevel=0 
#	-Wunused-variable 
#XSDK_INDEX_SIZE = 64 ## 64-bit integer
#
# NOOPTS should be set to be the C flags that turn off any optimization
NOOPTS		= -O0

# Add more flags to use GPU
ifeq "${ACC}" "GPU"
CFLAGS	      += -DGPU_ACC
INCS 	      += -I/usr/common/usg/cuda/5.5/include
LIBS 	      += -L/usr/common/usg/cuda/5.5/lib64 -lcublas -lcudart 
endif

############################################################################
# FORTRAN compiler setup
FORTRAN         = mpif90
F90FLAGS	= -fast -Mnomain
############################################################################
LOADER	        = mpicc
LOADOPTS	= -openmp #-Mnomain
############################################################################
#  C preprocessor defs for compilation (-DNoChange, -DAdd_, or -DUpCase)
#
#  Need follow the convention of how C calls a Fortran routine.
#
CDEFS        = -DNoChange
